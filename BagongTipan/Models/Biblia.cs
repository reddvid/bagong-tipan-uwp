// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BagongTipan.UWP;
//
//    var biblia = Biblia.FromJson(jsonString);

namespace BagongTipan.UWP
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Biblia
    {
        [JsonProperty("Biblia")]
        public ObservableCollection<BibliaElement> BibliaBiblia { get; set; }
    }

    public partial class BibliaElement
    {
        [JsonProperty("libro")]
        public string Libro { get; set; }

        [JsonProperty("kabanata")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Kabanata { get; set; }

        [JsonProperty("index")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Index { get; set; }

        [JsonProperty("verse")]
        public string Verse { get; set; }
    }

    public partial class Biblia
    {
        public static Biblia FromJson(string json) => JsonConvert.DeserializeObject<Biblia>(json, BagongTipan.UWP.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Biblia self) => JsonConvert.SerializeObject(self, BagongTipan.UWP.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            try
            {
				if (reader.TokenType == JsonToken.Null) return null;
				var value = serializer.Deserialize<string>(reader);
				long l;
				if (Int64.TryParse(value, out l))
				{
					return l;
				}
			}
            catch
            {
				throw new Exception("Cannot unmarshal type long");
			}

            return 0;
		}

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
